/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.ai4fm.proofprocess.isabelle.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.ai4fm.proofprocess.isabelle.util.IsabelleProofProcessAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IsabelleProofProcessItemProviderAdapterFactory extends IsabelleProofProcessAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsabelleProofProcessItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.MarkupTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkupTermItemProvider markupTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.MarkupTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkupTermAdapter() {
		if (markupTermItemProvider == null) {
			markupTermItemProvider = new MarkupTermItemProvider(this);
		}

		return markupTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.IsaTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsaTermItemProvider isaTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.IsaTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsaTermAdapter() {
		if (isaTermItemProvider == null) {
			isaTermItemProvider = new IsaTermItemProvider(this);
		}

		return isaTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.NameTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTermItemProvider nameTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.NameTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTermAdapter() {
		if (nameTermItemProvider == null) {
			nameTermItemProvider = new NameTermItemProvider(this);
		}

		return nameTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.NamedTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedTermItemProvider namedTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.NamedTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedTermAdapter() {
		if (namedTermItemProvider == null) {
			namedTermItemProvider = new NamedTermItemProvider(this);
		}

		return namedTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.InstTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstTermItemProvider instTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.InstTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstTermAdapter() {
		if (instTermItemProvider == null) {
			instTermItemProvider = new InstTermItemProvider(this);
		}

		return instTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.Inst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstItemProvider instItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.Inst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstAdapter() {
		if (instItemProvider == null) {
			instItemProvider = new InstItemProvider(this);
		}

		return instItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.IsabelleTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsabelleTraceItemProvider isabelleTraceItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.IsabelleTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsabelleTraceAdapter() {
		if (isabelleTraceItemProvider == null) {
			isabelleTraceItemProvider = new IsabelleTraceItemProvider(this);
		}

		return isabelleTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.NamedTermTree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedTermTreeItemProvider namedTermTreeItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.NamedTermTree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedTermTreeAdapter() {
		if (namedTermTreeItemProvider == null) {
			namedTermTreeItemProvider = new NamedTermTreeItemProvider(this);
		}

		return namedTermTreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.isabelle.IsabelleCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsabelleCommandItemProvider isabelleCommandItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.isabelle.IsabelleCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsabelleCommandAdapter() {
		if (isabelleCommandItemProvider == null) {
			isabelleCommandItemProvider = new IsabelleCommandItemProvider(this);
		}

		return isabelleCommandItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (markupTermItemProvider != null) markupTermItemProvider.dispose();
		if (isaTermItemProvider != null) isaTermItemProvider.dispose();
		if (nameTermItemProvider != null) nameTermItemProvider.dispose();
		if (namedTermItemProvider != null) namedTermItemProvider.dispose();
		if (instTermItemProvider != null) instTermItemProvider.dispose();
		if (instItemProvider != null) instItemProvider.dispose();
		if (isabelleTraceItemProvider != null) isabelleTraceItemProvider.dispose();
		if (namedTermTreeItemProvider != null) namedTermTreeItemProvider.dispose();
		if (isabelleCommandItemProvider != null) isabelleCommandItemProvider.dispose();
	}

}
