/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.ai4fm.proofprocess.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.ai4fm.proofprocess.util.ProofProcessAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProofProcessItemProviderAdapterFactory extends ProofProcessAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProofProcessItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.Intent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntentItemProvider intentItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.Intent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntentAdapter() {
		if (intentItemProvider == null) {
			intentItemProvider = new IntentItemProvider(this);
		}

		return intentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.StringTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTermItemProvider stringTermItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.StringTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTermAdapter() {
		if (stringTermItemProvider == null) {
			stringTermItemProvider = new StringTermItemProvider(this);
		}

		return stringTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofStepItemProvider proofStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofStepAdapter() {
		if (proofStepItemProvider == null) {
			proofStepItemProvider = new ProofStepItemProvider(this);
		}

		return proofStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofInfoItemProvider proofInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofInfoAdapter() {
		if (proofInfoItemProvider == null) {
			proofInfoItemProvider = new ProofInfoItemProvider(this);
		}

		return proofInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofFeatureDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofFeatureDefItemProvider proofFeatureDefItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofFeatureDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofFeatureDefAdapter() {
		if (proofFeatureDefItemProvider == null) {
			proofFeatureDefItemProvider = new ProofFeatureDefItemProvider(this);
		}

		return proofFeatureDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofFeatureItemProvider proofFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofFeatureAdapter() {
		if (proofFeatureItemProvider == null) {
			proofFeatureItemProvider = new ProofFeatureItemProvider(this);
		}

		return proofFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofEntryItemProvider proofEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofEntryAdapter() {
		if (proofEntryItemProvider == null) {
			proofEntryItemProvider = new ProofEntryItemProvider(this);
		}

		return proofEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofSeq} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofSeqItemProvider proofSeqItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofSeq}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofSeqAdapter() {
		if (proofSeqItemProvider == null) {
			proofSeqItemProvider = new ProofSeqItemProvider(this);
		}

		return proofSeqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofParallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofParallelItemProvider proofParallelItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofParallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofParallelAdapter() {
		if (proofParallelItemProvider == null) {
			proofParallelItemProvider = new ProofParallelItemProvider(this);
		}

		return proofParallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofId} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofIdItemProvider proofIdItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofId}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofIdAdapter() {
		if (proofIdItemProvider == null) {
			proofIdItemProvider = new ProofIdItemProvider(this);
		}

		return proofIdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.Attempt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttemptItemProvider attemptItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.Attempt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttemptAdapter() {
		if (attemptItemProvider == null) {
			attemptItemProvider = new AttemptItemProvider(this);
		}

		return attemptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.Proof} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofItemProvider proofItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.Proof}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofAdapter() {
		if (proofItemProvider == null) {
			proofItemProvider = new ProofItemProvider(this);
		}

		return proofItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ai4fm.proofprocess.ProofStore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProofStoreItemProvider proofStoreItemProvider;

	/**
	 * This creates an adapter for a {@link org.ai4fm.proofprocess.ProofStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProofStoreAdapter() {
		if (proofStoreItemProvider == null) {
			proofStoreItemProvider = new ProofStoreItemProvider(this);
		}

		return proofStoreItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (intentItemProvider != null) intentItemProvider.dispose();
		if (stringTermItemProvider != null) stringTermItemProvider.dispose();
		if (proofStepItemProvider != null) proofStepItemProvider.dispose();
		if (proofInfoItemProvider != null) proofInfoItemProvider.dispose();
		if (proofFeatureDefItemProvider != null) proofFeatureDefItemProvider.dispose();
		if (proofFeatureItemProvider != null) proofFeatureItemProvider.dispose();
		if (proofEntryItemProvider != null) proofEntryItemProvider.dispose();
		if (proofSeqItemProvider != null) proofSeqItemProvider.dispose();
		if (proofParallelItemProvider != null) proofParallelItemProvider.dispose();
		if (proofIdItemProvider != null) proofIdItemProvider.dispose();
		if (attemptItemProvider != null) attemptItemProvider.dispose();
		if (proofItemProvider != null) proofItemProvider.dispose();
		if (proofStoreItemProvider != null) proofStoreItemProvider.dispose();
	}

}
